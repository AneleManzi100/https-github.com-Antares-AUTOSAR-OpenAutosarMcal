/**
 * @file        ComStack_Types.h
 * @brief       This file is the AUTOSAR communication stack type header file.
 *
 * It contains all types that are used across several modules of the communication stack of the
 * basic software and all types of all basic software modules that are platform and compiler
 * independent.
 * This file contains definitions of variables, structs an enums for the use of ComStack.
 */
#ifndef COM_STACK_TYPES_H__
#define COM_STACK_TYPES_H__

#include "Std_Types.h"

/**
 * @brief This type is used within the entire AUTOSAR Com Stack except for bus drivers.
 *
 * Variables of this type serve as a unique identifier of a PDU within a software module or
 * a set thereof, and also for interaction of two software modules where the PduId of the
 * corresponding target module is being used for referencing.
 * The size of this global type depends on the maximum number of PDUs used within one software
 * module.
 * This parameter shall be generated by the generator tool depending on the value configured in
 * EcuC virtual layer.
 *
 * @reqs  SWS_COMTYPE_00005, SWS_Comtype_00006, SWS_Comtype_00007, SWS_Comtype_00014
 */
typedef uint8 PduIdType;

/**
 * @brief This type shall be used within the entire AUTOSAR Com Stack except for bus drivers.
 *
 * Variables of this type serve as length information of a PDU. The length information is provided
 * in number of bytes.
 * The maximum length of a Pdu, is the length of the largest (possibly segmented) PDU to be sent by
 * the ECU.
 * This parameter shall be generated by the generator tool depending on the value configured in
 * EcuC virtual layer.
 *
 * @reqs  SWS_COMTYPE_00008, SWS_Comtype_00010, SWS_Comtype_00017
 */
typedef uint32 PduLengthType;

/**
 * @brief This variables shall be used to store the basic information about a PDU.
 *
 * Variables of this type shall be used to store the basic information about a PDU of any
 * type, namely a pointer variable pointing to its SDU (payload), a pointer to Meta Data of the
 * PDU, and the corresponding length of the SDU in bytes.
 * The type of he pointer SduDataPtr depends on the memory model being used at compile time.
 * The pointer to the meta data of the PDU *(MetaDataPtr), consists of a sequence of meta data
 * items. The length and type of the meta data items is statically configured for each PDU. Meta
 * data items with more than 8 bits use platform byte order.
 *
 * @reqs  SWS_COMTYPE_00011
 */
typedef struct
{
    uint8 *SduDataPtr;       /*!< Pointer to the SDU (i.e. payload data) of the PDU.*/
    uint8 *MetaDataPtr;      /*!<Pointer to the meta data of the PDU.*/
    PduLengthType SduLength; /*!<Length of the SDU in bytes.*/
} PduInfoType;

/**
 * @brief Used to store the identifier of a partial network cluster.
 *
 * @reqs  SWS_COMTYPE_00036
 */
typedef uint8 PNCHandleType;

/**
 * @brief Specify the parameter to which the value has to be changed (BS or STmin).
 *
 * @reqs  SWS_COMTYPE_00031
 */
typedef enum
{
    TP_STMIN = 0x00, /*!<Separation Time*/
    TP_BS    = 0x01, /*!<Block Size*/
    TP_BC    = 0x02  /*!<The Bandwidth cntrl parameter used in FlexRay transport protocol module.*/
} TPParameterType;

/**
 * @brief Variables of this type shall be used to store the result of a buffer request.
 *
 * @reqs  SWS_COMTYPE_00012
 */
typedef enum
{
    BUFREQ_OK       = 0x00, /*!<Buffer request accomplished successful.*/
    BUFREQ_E_NOT_OK = 0x01, /*!<Buffer request not successful. Buffer cannot be accessed.*/
    BUFREQ_E_BUSY   = 0x02, /*!<Temporarily no buffer available.*/
    BUFREQ_E_OVFL   = 0x03  /*!<No Buffer of the required length can be provided.*/
} BufReq_ReturnType;

/**
 * @brief Variables of this type shall be used to store the state of TP buffer.
 *
 * @reqs  SWS_COMTYPE_00027
 */
typedef enum
{
    TP_DATACONF    = 0x00, /*!<Indicates that all data that have been copied so far, are confirmed*/
    TP_DATARETRY   = 0x01, /*!<Indicates that this API call shall copy already copied data.*/
    TP_CONFPENDING = 0x02  /*!<Indicates that the previously copied data must remain in the TP.*/
} TpDataStateType;

/**
 * @brief Variables of this type shall be used to store the information about Tp buffer handling.
 *
 * @reqs  SWS_COMTYPE_00037
 */
typedef struct
{
    TpDataStateType TpDataState; /*!<The enum type to be used to store the state of Tp buffer.*/
    PduLengthType TxTpDataCnt;   /*!<Offset from the current position.*/
} RetryInfoType;

/**
 * @brief This variables shall be used to store the identifier of a communication channel.
 *
 * @reqs  SWS_COMTYPE_00038
 */
typedef uint8 NetworkHandleType;

/**
 * @brief Used for the handle Ids of Com and LdCom user callbacks. Tags: atp.Status=draft
 *
 * @reqs  SWS_COMTYPE_91001 DRAFT
 */
typedef uint16 CbkHandleIdType;

#endif /* COM_STACK_TYPES_H__ */